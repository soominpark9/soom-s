body {
    background-color: lightgrey;
}

h1 {
    text-align: center;
}

.container {
    width : 1000px;
    height : 400px;
    background-color: #333;
    /* width를 지정한 위에 auto를 주면 가운데 정렬이된다 */
    margin: 0 auto;

    /* 기본 용어
    -main axis : 주축
    -corss axis : 교차축
     */
    display: flex;
    /* 요소들을 나란하게 만들어 준다 */
    /*  이 모든 것은 display : flex를 사용해야 활용 할 수 있는 것들 */
    /* flex-direction : 정렬 방향
    - row값 (default 값) : 수평정렬 (좌 -> 우 )
    - row-reverse 값 : 수평 정렬 (우 -> 좌 )
    - column 값 : 수직 정렬 ( 위 -> 아래 )
    - column-reverse 값 : 수직 정렬 ( 아래 -> 위 ) */ 

    /* row 일때
    flex-direction: row-reverse;
    flex-direction: row;
    column 일때 ( 주축 방향이 세로로 바뀜)
    flex-direction: colmn
    flex-direction: column-reverse */

    /* justify-content : 주축 item을 어떻게 배치할 것인가?
       - flex-direction : 수평 정렬일 떄; 주축 = row
       - flex-direction : 수직 정렬일 때; 주축 = column
       - center
       (사용 가능한 속성)
       -flex-start (default) : 아이템을 start 지점을 기준으로 나열 해 준다
       -flex-end : 아이템을 end(끝점)을 기준으로 나열 해 준다
       -space-between : 처음과 마지막 아이템을 양 끝에 붙이고, 나머지 영역 공평하게 나눔
       -space-around : 아이템들이 모든 여백을 공평하게 나눔 ( 양끝 영역 1, 나머지 영역2)
       -space-evenly : start 부터 첫 아이템 간격, 아이템 끼리의 간격, 마지막 아이템 부터 end까지의 간격이 일정*/ 
       

    /* justify-content: flex-start;
    justify-content: flex-end;
    justify-content: space-between;
    

    justify-content: space-around; -> between 과 비슷하지만 around는 양족 마지막에 있는
    아이템들의 바깥 공간도 여분을 준다 ( 양쪽 남은 공간 더한 넓이 = 아이템 사이의 넓이 )
    between은 아이템 사이 공간만.


    justify-content: space-evenly; 아이템 바깥 과 안 모드 균등한 넓이를 가지고 있어야 한다 


    align-items: 교차 축에 대해 item을 어떻게 배치할 것인가?
      -flex-direction : 수평 정렬일 때; 교차축 = column
      -flex-direction : 수직 정렬일 때; 교차축 = row

      (사용 가능한 속성)
      -stretch (default값)
      -flex-start : 시작점으로 정렬 
      -flex-end : 바닥으로 아이템들이 붙는다 바닥이 주축이라
      -center : 세로선으로 정렬
      -baseline :

      align-items : stretch; container (부모요소) 의 교차축을 채우기 위해 늘림
         - 현재 .items 요소에 width, height 값이 있어서 늘어나지 않기 때문에 
      늘리고 싶다면 해당 내용을 지워 줘야 한다.
      align-items : flex-start; 교차축의 시작점으로 정렬
      align-items : flex-end; 교차축의 끝점으로 연결
      align-items : center; 교차축의 가운데 정렬
      align-items : baseline; item을 텍스트의 베이스라인을 기준으로 정렬


      flex-wrap : 줄바꿈 (개행) 처리
         -> 컨테이너가 한 줄에 아이템을 다 수용하지 못할 때, 줄바꿈 여부 설정 가능

         (사용 가능한 속성) 
         -wrap : 줄바꿈 (width가 아이템에 비해 작을 경우) 자동 줄바꿈이 된다
         튀어나오지 않게 자동으로
         -wrap-reverse : 줄바꿈 + 아이템을 역순 배치 

         
         align-content : 여러 행 정렬 
           (조건) flex-wrap: wrap 상태에서 아이템이 2줄 이상 일때 교차축 방향 설정
        
           height : 300px;
           align-content:stretch;
           align-content:flex-start; : 공백 없이 모든 아이템이 합쳐서 start지점으로 붙는다
           align-content:flex-end;
           align-content:center;
           align-content:space-between; 양쪽끝으로다 밀어버리고
           align-content:space-around; 바깥공백과 안쪽공백이 1:2가 되고
           align-content:space-evenly; 모두가 같은 공백을 가지고
 */
       
    flex-wrap : wrap;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-end;
    align-content:space-between;
}

.container > .items {
    width:100px;
    height : 100px;
    font-size: 36px;
    font-weight: 700;
    text-align: center;
    line-height: 250%;
}


.item1 {
    background-color: antiquewhite;
}

.item2 {
    background-color: blueviolet;
}

.item3 {
    background-color: blue;
}

.item4 {
    background-color: aquamarine;}

.item5 {
    background-color: red;
}


/* div 안에 div정가운데 정렬 */
.outer {
    width : 300px;
    height : 300px;
    background-color: aquamarine;
}

.inner {
    width : 100px;
    height : 100px;
    background-color: pink;
}
/* ver. position, transform  */

.outer1 {
    position : relative
}

.inner1 {
    position: absolute;

    top : 50%;
    left : 50%;
    transform : translate(-50%, -50%);
    /* 함수이기 때문에 translate랑 () 사이에 공백이 있으면 안된다 */
}

/* ver. display: flex; */

.outer2 {
    display : flex;
    align-items :center;
    justify-content :center;

}

